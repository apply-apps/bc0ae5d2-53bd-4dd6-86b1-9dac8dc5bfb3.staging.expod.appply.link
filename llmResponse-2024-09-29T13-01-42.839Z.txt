```js
// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, Image, ActivityIndicator } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import axios from 'axios';

const API_URL = 'https://apihub.staging.appply.link/chatgpt';

const App = () => {
  const [beerCount, setBeerCount] = useState(0);
  const [joke, setJoke] = useState('');
  const [loading, setLoading] = useState(false);

  const fetchJoke = async () => {
    setLoading(true);
    try {
      const response = await axios.post(API_URL, {
        messages: [
          { role: "system", content: "Jesteś zabawnym asystentem. Proszę podaj krótki, dowcipny żart o piwie po polsku." },
          { role: "user", content: "Opowiedz mi krótki żart o piwie po polsku." }
        ],
        model: "gpt-4o"
      });
      const { data } = response;
      setJoke(data.response);
    } catch (error) {
      console.error('Błąd podczas pobierania żartu:', error);
      setJoke('Ups! Maszyna do żartów jest trochę pijana. Spróbuj ponownie!');
    } finally {
      setLoading(false);
    }
  };

  const incrementBeer = () => {
    setBeerCount(prevCount => prevCount + 1);
    fetchJoke();
  };

  const resetCount = () => {
    setBeerCount(0);
    setJoke('');
  };

  return (
    <LinearGradient
      colors={['#F7B733', '#FC4A1A']}
      style={styles.container}
    >
      <View style={styles.contentContainer}>
        <Text style={styles.title}>Licznik Piw</Text>
        <View style={styles.counterContainer}>
          <Text style={styles.counterText}>{beerCount}</Text>
          <Text style={styles.label}>Piw</Text>
        </View>
        <TouchableOpacity style={styles.beerButton} onPress={incrementBeer} disabled={loading}>
          <Image
            source={{ uri: 'https://picsum.photos/200/300' }}
            style={styles.beerImage}
          />
        </TouchableOpacity>
        <TouchableOpacity style={styles.resetButton} onPress={resetCount}>
          <Text style={styles.resetButtonText}>Resetuj</Text>
        </TouchableOpacity>
        <View style={styles.jokeContainer}>
          {loading ? (
            <ActivityIndicator size="large" color="#FFFFFF" />
          ) : (
            <Text style={styles.jokeText}>{joke}</Text>
          )}
        </View>
      </View>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  contentContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 30,
    textShadowColor: 'rgba(0, 0, 0, 0.75)',
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  counterContainer: {
    alignItems: 'center',
    marginBottom: 30,
  },
  counterText: {
    fontSize: 72,
    fontWeight: 'bold',
    color: '#FFFFFF',
    textShadowColor: 'rgba(0, 0, 0, 0.75)',
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  label: {
    fontSize: 24,
    color: '#FFFFFF',
    textShadowColor: 'rgba(0, 0, 0, 0.75)',
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  beerButton: {
    width: 150,
    height: 150,
    borderRadius: 75,
    backgroundColor: '#FFFFFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 30,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  beerImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
  },
  resetButton: {
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 25,
    marginBottom: 20,
  },
  resetButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  jokeContainer: {
    minHeight: 80,
    justifyContent: 'center',
    alignItems: 'center',
  },
  jokeText: {
    color: '#FFFFFF',
    fontSize: 16,
    textAlign: 'center',
    fontStyle: 'italic',
    textShadowColor: 'rgba(0, 0, 0, 0.75)',
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 5,
  },
});

export default App;
// End of App.js
```